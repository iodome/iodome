{"version":3,"sources":["../src/playwright/fixtures.ts","../src/playwright/server.ts","../src/playwright/teardown.ts","../src/vitest/index.ts"],"sourcesContent":["import { test as base, TestInfo } from \"@playwright/test\";\nimport TestServer from \"./server\";\n\nfunction url(testId: string): string {\n  const id = testId.replace(\"-\", \"_\");\n  return `postgresql://postgres:postgres@localhost:5432/iodome_test_${id}?schema=public`;\n}\n\nexport function createTestFixtures<T>(\n  PrismaClientConstructor: new (config?: any) => T\n) {\n  return base.extend<{ prisma: T }>({\n    baseURL: [\n      async ({}, use, testInfo) => {\n        const { testId } = testInfo;\n        const server = new TestServer(testId);\n        await server.setup();\n        await use(`http://127.0.0.1:${server.port}`);\n        await server.cleanup();\n      },\n      { scope: \"test\", timeout: 30000 },\n    ],\n    prisma: [\n      async ({}, use: any, testInfo: TestInfo) => {\n        const { testId } = testInfo;\n        const prisma = new PrismaClientConstructor({\n          datasources: { db: { url: url(testId) } },\n          log: process.env.DEBUG ? [\"query\", \"info\", \"warn\", \"error\"] : [],\n        });\n        await use(prisma);\n      },\n      { scope: \"test\" },\n    ],\n  });\n}\n","import { ChildProcess, execSync, spawn } from \"child_process\";\nimport http from \"http\";\nimport * as net from \"net\";\n\nexport default class TestServer {\n  public id: string;\n  public port: number;\n  public dbName: string;\n  public cmd: string;\n  private server?: ChildProcess;\n  private static instances: Set<TestServer> = new Set();\n  private static cleanupSetup = false;\n\n  constructor(id: string) {\n    this.id = id.replace(\"-\", \"_\");\n    this.port = 0;\n    this.dbName = \"iodome_test\";\n    this.cmd = process.env.CI ? \"start\" : \"dev\";\n    TestServer.instances.add(this);\n    this.setupGlobalCleanup();\n  }\n\n  async setup() {\n    this.port = await this.getFreePort();\n    this.setupDb();\n    this.log(`Starting server for test ${this.id} on port ${this.port}`);\n\n    this.server = spawn(\"pnpm\", [this.cmd], {\n      env: {\n        ...process.env,\n        DATABASE_URL: this.url,\n        PORT: this.port.toString(),\n      },\n      stdio: \"ignore\",\n      detached: process.platform !== \"win32\", // Create new process group on Unix\n    });\n\n    this.log(`Server process ${this.server.pid} started for test ${this.id}`);\n    await this.waitForServerReady(this.port);\n    this.log(`Server ready for test ${this.id}`);\n  }\n\n  private setupGlobalCleanup() {\n    if (TestServer.cleanupSetup) {\n      return;\n    }\n    TestServer.cleanupSetup = true;\n\n    const cleanup = () => {\n      const instanceCount = TestServer.instances.size;\n      if (instanceCount > 0) {\n        this.log(\n          `Cleaning up ${instanceCount} test server${\n            instanceCount === 1 ? \"\" : \"s\"\n          }...`\n        );\n      }\n      TestServer.instances.forEach((instance) => {\n        instance.cleanup();\n      });\n    };\n\n    process.once(\"SIGINT\", () => {\n      cleanup();\n      process.exit(0);\n    });\n    process.once(\"SIGTERM\", () => {\n      cleanup();\n      process.exit(0);\n    });\n    process.once(\"exit\", cleanup);\n    process.once(\"uncaughtException\", (err) => {\n      console.error(\"Uncaught exception:\", err);\n      cleanup();\n      process.exit(1);\n    });\n    process.once(\"unhandledRejection\", (err) => {\n      console.error(\"Unhandled rejection:\", err);\n      cleanup();\n      process.exit(1);\n    });\n  }\n\n  async cleanup() {\n    TestServer.instances.delete(this);\n\n    if (this.server && !this.server.killed) {\n      this.log(`Killing server process ${this.server.pid}`);\n      try {\n        if (this.server.pid) {\n          process.kill(-this.server.pid, \"SIGTERM\");\n        }\n      } catch (e) {\n        this.server.kill(\"SIGTERM\");\n      }\n\n      setTimeout(() => {\n        if (this.server && !this.server.killed) {\n          try {\n            if (this.server.pid) {\n              process.kill(-this.server.pid, \"SIGKILL\");\n            }\n          } catch (e) {\n            this.server.kill(\"SIGKILL\");\n          }\n        }\n      }, 2000);\n    }\n\n    this.cleanupDb();\n  }\n\n  private get url() {\n    return `postgresql://postgres:postgres@localhost:5432/${this.name}?schema=public`;\n  }\n\n  private get name() {\n    return `${this.dbName}_${this.id}`;\n  }\n\n  private async getFreePort(): Promise<number> {\n    return new Promise((resolve, reject) => {\n      const server = net.createServer();\n      server.listen(0, () => {\n        const address = server.address();\n        server.close();\n        if (address && typeof address === \"object\") {\n          resolve(address.port);\n        } else {\n          reject(new Error(\"Failed to acquire free port\"));\n        }\n      });\n    });\n  }\n\n  private setupDb() {\n    this.log(`Creating test database: ${this.name}`);\n    execSync(\n      `\n\t\t\tpsql -U postgres -c \"\n\t\t\t\tSELECT pg_terminate_backend(pid)\n\t\t\t\tFROM pg_stat_activity\n\t\t\t\tWHERE datname = '${this.name}' AND pid <> pg_backend_pid();\n\t\t\t\"\n\t\t`,\n      { stdio: \"ignore\" }\n    );\n    execSync(`psql -U postgres -c \"DROP DATABASE IF EXISTS ${this.name}\"`, {\n      stdio: \"ignore\",\n    });\n    execSync(`psql -U postgres -c \"CREATE DATABASE ${this.name}\"`, {\n      stdio: \"ignore\",\n    });\n    this.log(`Running Prisma migrations for ${this.name}`);\n    execSync(\n      `DATABASE_URL=${this.url} pnpm prisma db push --accept-data-loss`,\n      { stdio: \"ignore\" }\n    );\n    this.log(`Database setup complete for ${this.name}`);\n  }\n\n  private cleanupDb() {\n    try {\n      execSync(\n        `\n        psql -U postgres -c \"\n          SELECT pg_terminate_backend(pid)\n          FROM pg_stat_activity\n          WHERE datname = '${this.name}' AND pid <> pg_backend_pid();\n        \"\n      `,\n        { stdio: \"ignore\" }\n      );\n      execSync(`psql -U postgres -c \"DROP DATABASE IF EXISTS ${this.name}\"`, {\n        stdio: \"ignore\",\n      });\n      this.log(`Dropped test database: ${this.name}`);\n    } catch (e) {\n      if (process.env.DEBUG_IODOME) {\n        console.warn(`Failed to drop test database ${this.name}:`, e);\n      }\n    }\n  }\n\n  private async waitForServerReady(timeout = 60000) {\n    const start = Date.now();\n\n    return new Promise<void>((resolve, reject) => {\n      const check = () => {\n        const req = http.get(`http://127.0.0.1:${this.port}`, (res) => {\n          if (res.statusCode && res.statusCode < 500) {\n            resolve();\n          } else {\n            retry();\n          }\n        });\n        req.on(\"error\", retry);\n        req.end();\n      };\n\n      const retry = () => {\n        if (Date.now() - start > timeout) {\n          reject(\n            new Error(\n              \"Dev server did not become ready within the timeout period.\"\n            )\n          );\n        } else {\n          setTimeout(check, 100);\n        }\n      };\n\n      check();\n    });\n  }\n\n  private log(message: any) {\n    if (process.env.DEBUG_IODOME) {\n      console.log(message);\n    }\n  }\n}\n","import { execSync } from \"child_process\";\n\nasync function dropDatabases() {\n  const result = execSync(\n    `\n\t\tpsql -U postgres -t -c \"\n\t\t\tSELECT datname\n\t\t\tFROM pg_database\n\t\t\tWHERE datname LIKE 'iodome_test%';\n\t\t\"\n\t`,\n    { encoding: \"utf-8\" }\n  );\n\n  const databases = result\n    .split(\"\\n\")\n    .map((db: string) => db.replace(/â”‚/g, \"\").trim())\n    .filter((db: string) => db.length > 0)\n    .filter((db: string) => db.includes(\"iodome_test\"));\n\n  databases.forEach((db: string) => {\n    execSync(`\n\t\t\tpsql -U postgres -c \"\n\t\t\t\tSELECT pg_terminate_backend(pid)\n\t\t\t\tFROM pg_stat_activity\n\t\t\t\tWHERE datname = '${db}' AND pid <> pg_backend_pid();\n\t\t\t\"\n\t\t`, { stdio: 'ignore' });\n    execSync(`psql -U postgres -c \"DROP DATABASE IF EXISTS \\\"${db}\\\"\";`, { stdio: 'ignore' });\n  });\n}\n\nexport { dropDatabases };\n","import { afterEach, beforeEach } from \"vitest\";\n\nexport default function useTransactions<\n  T extends { $queryRaw: (query: TemplateStringsArray) => Promise<any> }\n>(prisma: T) {\n  beforeEach(async () => {\n    await prisma.$queryRaw`BEGIN;`;\n  });\n\n  afterEach(async () => {\n    await prisma.$queryRaw`ROLLBACK;`;\n  });\n}\n"],"mappings":"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","names":["base","execSync","spawn","http","net","TestServer","_TestServer","id","cleanup","instanceCount","instance","err","resolve","reject","server","address","e","timeout","start","check","req","res","retry","message","url","testId","createTestFixtures","PrismaClientConstructor","base","use","testInfo","server","TestServer","prisma","execSync","dropDatabases","db","afterEach","beforeEach","useTransactions","prisma"]}