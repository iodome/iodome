{"version":3,"sources":["../src/playwright/fixtures.ts","../src/utils/server.ts","../src/playwright/utils.ts","../src/utils/logger.ts","../src/utils/postgres-client.ts","../src/playwright/teardown.ts","../src/vitest/index.ts"],"sourcesContent":["import { test as base, TestInfo } from \"@playwright/test\";\nimport TestServer from \"../utils/server\";\n\nfunction url(testId: string): string {\n  const id = testId.replace(\"-\", \"_\");\n  return `postgresql://postgres:postgres@localhost:5432/iodome_test_${id}?schema=public`;\n}\n\nexport function createTestFixtures<T>(\n  PrismaClientConstructor: new (config?: any) => T\n) {\n  return base.extend<{ prisma: T }>({\n    baseURL: [\n      async ({}, use, testInfo) => {\n        const { testId } = testInfo;\n        const server = new TestServer(testId);\n        await server.setup();\n        await use(`http://127.0.0.1:${server.port}`);\n        await server.cleanup();\n      },\n      { scope: \"test\", timeout: 30000 },\n    ],\n    prisma: [\n      async ({}, use: any, testInfo: TestInfo) => {\n        const { testId } = testInfo;\n        const prisma = new PrismaClientConstructor({\n          datasources: { db: { url: url(testId) } },\n          log: process.env.DEBUG ? [\"query\", \"info\", \"warn\", \"error\"] : [],\n        });\n        await use(prisma);\n      },\n      { scope: \"test\" },\n    ],\n  });\n}\n","import { ChildProcess, execSync, spawn } from \"child_process\";\nimport http from \"http\";\nimport * as net from \"net\";\nimport { getTemplateDbName } from \"../playwright/utils\";\nimport Logger from \"./logger\";\nimport PostgresClient from \"./postgres-client\";\n\nexport default class TestServer {\n  public id: string;\n  public port: number;\n  public dbName: string;\n  public cmd: string;\n  private server?: ChildProcess;\n  private static instances: Set<TestServer> = new Set();\n  private static cleanupSetup = false;\n  private static templateDbName: string | null = null;\n  private static templateReady = false;\n\n  constructor(id: string) {\n    this.id = id.replace(\"-\", \"_\");\n    this.port = 0;\n    this.dbName = \"iodome_test\";\n    this.cmd = process.env.CI || process.env.IODOME_BUILD ? \"start\" : \"dev\";\n    TestServer.instances.add(this);\n    this.setupGlobalCleanup();\n  }\n\n  async setup() {\n    this.port = await this.getFreePort();\n    await this.setupDb();\n    Logger.log(`Starting server for test ${this.id} on port ${this.port}`);\n\n    this.server = spawn(\"pnpm\", [this.cmd], {\n      env: {\n        ...process.env,\n        DATABASE_URL: this.url,\n        PORT: this.port.toString(),\n      },\n      stdio: \"ignore\",\n      detached: process.platform !== \"win32\",\n    });\n\n    Logger.log(`Server process ${this.server.pid} started for test ${this.id}`);\n    await this.waitForServerReady(this.port);\n    Logger.log(`Server ready for test ${this.id}`);\n  }\n\n  private setupGlobalCleanup() {\n    if (TestServer.cleanupSetup) {\n      return;\n    }\n    TestServer.cleanupSetup = true;\n\n    const cleanup = () => {\n      const instanceCount = TestServer.instances.size;\n      if (instanceCount > 0) {\n        Logger.log(\n          `Cleaning up ${instanceCount} test server${\n            instanceCount === 1 ? \"\" : \"s\"\n          }...`\n        );\n      }\n      TestServer.instances.forEach((instance) => {\n        instance.cleanup();\n      });\n    };\n\n    process.once(\"SIGINT\", () => {\n      cleanup();\n      process.exit(0);\n    });\n    process.once(\"SIGTERM\", () => {\n      cleanup();\n      process.exit(0);\n    });\n    process.once(\"exit\", cleanup);\n    process.once(\"uncaughtException\", (err) => {\n      console.error(\"Uncaught exception:\", err);\n      cleanup();\n      process.exit(1);\n    });\n    process.once(\"unhandledRejection\", (err) => {\n      console.error(\"Unhandled rejection:\", err);\n      cleanup();\n      process.exit(1);\n    });\n  }\n\n  async cleanup() {\n    TestServer.instances.delete(this);\n\n    if (this.server && !this.server.killed) {\n      Logger.log(`Killing server process ${this.server.pid}`);\n      try {\n        if (this.server.pid) {\n          process.kill(-this.server.pid, \"SIGTERM\");\n        }\n      } catch (e) {\n        this.server.kill(\"SIGTERM\");\n      }\n\n      setTimeout(() => {\n        if (this.server && !this.server.killed) {\n          try {\n            if (this.server.pid) {\n              process.kill(-this.server.pid, \"SIGKILL\");\n            }\n          } catch (e) {\n            this.server.kill(\"SIGKILL\");\n          }\n        }\n      }, 2000);\n    }\n\n    this.cleanupDb();\n  }\n\n  private get url() {\n    return `postgresql://postgres:postgres@localhost:5432/${this.name}?schema=public`;\n  }\n\n  private get name() {\n    return `${this.dbName}_${this.id}`;\n  }\n\n  private async getFreePort(): Promise<number> {\n    return new Promise((resolve, reject) => {\n      const server = net.createServer();\n      server.listen(0, () => {\n        const address = server.address();\n        server.close();\n        if (address && typeof address === \"object\") {\n          resolve(address.port);\n        } else {\n          reject(new Error(\"Failed to acquire free port\"));\n        }\n      });\n    });\n  }\n\n  private static getTemplateDbNameCached(): string {\n    if (TestServer.templateDbName) {\n      return TestServer.templateDbName;\n    }\n    TestServer.templateDbName = getTemplateDbName();\n    return TestServer.templateDbName;\n  }\n\n  private static checkTemplateExists(): boolean {\n    if (TestServer.templateReady) {\n      return true;\n    }\n\n    const templateName = TestServer.getTemplateDbNameCached();\n    try {\n      TestServer.templateReady =\n        PostgresClient.checkIfTemplateExists(templateName);\n      return TestServer.templateReady;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  private async setupDb() {\n    PostgresClient.disconnectAllConnections(this.name);\n    PostgresClient.dropDatabaseIfExists(this.name);\n    const hasTemplate = TestServer.checkTemplateExists();\n\n    Logger.log(`\n      Template exists: ${hasTemplate},\n      template name: ${TestServer.templateDbName}\n      `);\n\n    if (hasTemplate && TestServer.templateDbName) {\n      try {\n        PostgresClient.createDatabaseFromTemplate(\n          this.name,\n          TestServer.templateDbName\n        );\n      } catch (e) {\n        Logger.log(`Template creation failed, falling back to regular setup`);\n        PostgresClient.createDatabase(this.name, this.url);\n      }\n    } else {\n      PostgresClient.createDatabase(this.name, this.url);\n    }\n\n    Logger.log(`Database setup complete for ${this.name}`);\n  }\n\n  private cleanupDb() {\n    try {\n      PostgresClient.disconnectAllConnections(this.name);\n      PostgresClient.dropDatabaseIfExists(this.name);\n    } catch (e) {\n      Logger.warn(`Failed to drop test database ${this.name}:`, e);\n    }\n  }\n\n  private async waitForServerReady(timeout = 60000) {\n    const start = Date.now();\n\n    return new Promise<void>((resolve, reject) => {\n      const check = () => {\n        const req = http.get(`http://127.0.0.1:${this.port}`, (res) => {\n          if (res.statusCode && res.statusCode < 500) {\n            resolve();\n          } else {\n            retry();\n          }\n        });\n        req.on(\"error\", retry);\n        req.end();\n      };\n\n      const retry = () => {\n        if (Date.now() - start > timeout) {\n          reject(\n            new Error(\n              \"Dev server did not become ready within the timeout period.\"\n            )\n          );\n        } else {\n          setTimeout(check, 100);\n        }\n      };\n\n      check();\n    });\n  }\n}\n","import { createHash } from \"crypto\";\nimport { readFileSync } from \"fs\";\nimport * as path from \"path\";\nimport PostgresClient from \"../utils/postgres-client\";\n\nexport function getSchemaPath(): string {\n  // Check for --schema flag in process args\n  const schemaFlagIndex = process.argv.indexOf(\"--schema\");\n  if (schemaFlagIndex !== -1 && process.argv[schemaFlagIndex + 1]) {\n    return path.resolve(process.argv[schemaFlagIndex + 1]);\n  }\n\n  // Check PRISMA_SCHEMA_PATH env var\n  if (process.env.PRISMA_SCHEMA_PATH) {\n    return path.resolve(process.env.PRISMA_SCHEMA_PATH);\n  }\n\n  // Default location\n  return path.join(process.cwd(), \"prisma\", \"schema.prisma\");\n}\n\nexport function getTemplateDbName(): string {\n  try {\n    const schemaPath = getSchemaPath();\n    const schemaContent = readFileSync(schemaPath, \"utf8\");\n    const hash = createHash(\"sha256\")\n      .update(schemaContent)\n      .digest(\"hex\")\n      .slice(0, 8);\n    return `iodome_tpl_${hash}`;\n  } catch (e) {\n    return `iodome_tpl_default`;\n  }\n}\n","export default class Logger {\n  private static print = !!process.env.IODOME_DEBUG;\n\n  static log(...args: any[]) {\n    if (this.print) console.log(\"[iodome][LOG]\", ...args);\n  }\n\n  static warn(...args: any[]) {\n    if (this.print) console.warn(\"[iodome][WARN]\", ...args);\n  }\n\n  static error(...args: any[]) {\n    if (this.print) console.error(\"[iodome][ERROR]\", ...args);\n  }\n}\n","import { execSync } from \"child_process\";\nimport Logger from \"./logger\";\n\nexport default class PostgresClient {\n  static checkIfPostgresExists() {\n    try {\n      execSync(\"psql -U postgres -c 'SELECT 1'\", { stdio: \"ignore\" });\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  static checkIfTemplateExists(name: string) {\n    const result = execSync(\n      `psql -U postgres -tA -c \"SELECT 1 FROM pg_database WHERE datname='${name}'\"`,\n      { encoding: \"utf8\", stdio: \"pipe\" }\n    )\n      .toString()\n      .trim();\n    const exists = result.includes(\"1\");\n    Logger.log(\n      `Template existence check result: \"${result}\", exists: ${exists}`\n    );\n    return exists;\n  }\n\n  static createDatabase(name: string, url: string) {\n    Logger.log(`Creating database ${name}`);\n    execSync(`psql -U postgres -c \"CREATE DATABASE ${name}\"`, {\n      stdio: \"ignore\",\n    });\n    Logger.log(`Running Prisma migrations for ${name}`);\n    execSync(`DATABASE_URL=${url} pnpm prisma db push --accept-data-loss`, {\n      stdio: \"ignore\",\n    });\n  }\n\n  static createDatabaseFromTemplate(name: string, templateName: string) {\n    Logger.log(`Creating database ${name} using template ${templateName}`);\n    execSync(\n      `psql -U postgres -c \"CREATE DATABASE ${name} TEMPLATE ${templateName}\"`,\n      { stdio: \"ignore\" }\n    );\n    Logger.log(`Database created from template for ${name}`);\n  }\n\n  static dropIodomeDatabases() {\n    return execSync(\n      `\n\t\tpsql -U postgres -t -c \"\n\t\t\tSELECT datname\n\t\t\tFROM pg_database\n\t\t\tWHERE datname LIKE 'iodome_test%';\n\t\t\"\n\t`,\n      { encoding: \"utf-8\" }\n    );\n  }\n\n  static dropDatabaseIfExists(name: string) {\n    execSync(`psql -U postgres -c \"DROP DATABASE IF EXISTS ${name}\"`, {\n      stdio: \"ignore\",\n    });\n    Logger.log(`Dropped test database: ${name}`);\n  }\n\n  static disconnectAllConnections(name: string) {\n    execSync(\n      `\n        psql -U postgres -c \"\n          SELECT pg_terminate_backend(pid)\n          FROM pg_stat_activity\n          WHERE datname = '${name}' AND pid <> pg_backend_pid();\n        \"\n      `,\n      { stdio: \"ignore\" }\n    );\n  }\n}\n","import { execSync } from \"child_process\";\nimport PostgresClient from \"../utils/postgres-client\";\n\nasync function dropDatabases() {\n  const result = PostgresClient.dropIodomeDatabases();\n  const databases = result\n    .split(\"\\n\")\n    .map((db: string) => db.replace(/│/g, \"\").trim())\n    .filter((db: string) => db.length > 0)\n    .filter((db: string) => db.includes(\"iodome_test\"));\n\n  databases.forEach((db: string) => {\n    PostgresClient.disconnectAllConnections(db);\n    PostgresClient.dropDatabaseIfExists(db);\n  });\n}\n\nexport { dropDatabases };\n","import { afterEach, beforeEach } from \"vitest\";\n\nexport default function useTransactions<\n  T extends { $queryRaw: (query: TemplateStringsArray) => Promise<any> }\n>(prisma: T) {\n  beforeEach(async () => {\n    await prisma.$queryRaw`BEGIN;`;\n  });\n\n  afterEach(async () => {\n    await prisma.$queryRaw`ROLLBACK;`;\n  });\n}\n"],"mappings":"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","names":["base","spawn","http","net","createHash","readFileSync","path","getSchemaPath","schemaFlagIndex","getTemplateDbName","schemaPath","schemaContent","Logger","args","execSync","PostgresClient","execSync","name","result","exists","Logger","url","templateName","TestServer","_TestServer","id","Logger","spawn","cleanup","instanceCount","instance","err","resolve","reject","server","address","getTemplateDbName","templateName","PostgresClient","hasTemplate","timeout","start","check","req","http","res","retry","url","testId","createTestFixtures","PrismaClientConstructor","base","use","testInfo","server","TestServer","prisma","dropDatabases","PostgresClient","db","afterEach","beforeEach","useTransactions","prisma"]}